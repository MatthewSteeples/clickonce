//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClickOnce.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClickOnce.Resources.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a comma-separated list of globbing patterns to match assemblies to be included..
        /// </summary>
        internal static string Arg_Assemblies {
            get {
                return ResourceManager.GetString("Arg.Assemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the certificate password..
        /// </summary>
        internal static string Arg_CertificatePassword {
            get {
                return ResourceManager.GetString("Arg.CertificatePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the source of the certificate to use for signing. If omitted, the ClickOnce package will not be signed. Must be either be a path to a .pfx file, or stored certificate in the form Type\StoreName\CommonName, e.g. &apos;User\My\Certificate&apos;..
        /// </summary>
        internal static string Arg_CertificateSource {
            get {
                return ResourceManager.GetString("Arg.CertificateSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether a shortcut to the application should be added to the user&apos;s desktop&apos;. Has no effect if LaunchMode is &apos;url&apos;..
        /// </summary>
        internal static string Arg_CreateDesktopShortcut {
            get {
                return ResourceManager.GetString("Arg.CreateDesktopShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the culture of the application..
        /// </summary>
        internal static string Arg_Culture {
            get {
                return ResourceManager.GetString("Arg.Culture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a comma-separated list of globbing patterns to match data files to be included..
        /// </summary>
        internal static string Arg_DataFiles {
            get {
                return ResourceManager.GetString("Arg.DataFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the deployment and update location for the application. Required if UpdateMode is any value other than &apos;off&apos;. Must be a fully qualified URL or UNC path..
        /// </summary>
        internal static string Arg_DeploymentUrl {
            get {
                return ResourceManager.GetString("Arg.DeploymentUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a description for the application..
        /// </summary>
        internal static string Arg_Description {
            get {
                return ResourceManager.GetString("Arg.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the application assembly that starts when the application is run..
        /// </summary>
        internal static string Arg_EntryPoint {
            get {
                return ResourceManager.GetString("Arg.EntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of the web page that is displayed in dialog boxes during ClickOnce installation..
        /// </summary>
        internal static string Arg_ErrorUrl {
            get {
                return ResourceManager.GetString("Arg.ErrorUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a comma-separated list of globbing patterns to match non-assembly files to be included..
        /// </summary>
        internal static string Arg_Files {
            get {
                return ResourceManager.GetString("Arg.Files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the application icon file. This is used for the Start Menu and Add/Remove Programs dialog..
        /// </summary>
        internal static string Arg_IconFile {
            get {
                return ResourceManager.GetString("Arg.IconFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether the application can be launched from the Start menu, from a URL, or both. Must be one of: &apos;start&apos;, &apos;url&apos;, &apos;both&apos;..
        /// </summary>
        internal static string Arg_LaunchMode {
            get {
                return ResourceManager.GetString("Arg.LaunchMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the minimum version the user must update to when starting the application. Has no effect is LaunchMode is &apos;url&apos; or UpdateMode is &apos;off&apos;..
        /// </summary>
        internal static string Arg_MinimumVersion {
            get {
                return ResourceManager.GetString("Arg.MinimumVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the application. This name is used for the shortcut name on the Start menu and is part of the name that appears in the Add or Remove Programs dialog box..
        /// </summary>
        internal static string Arg_Name {
            get {
                return ResourceManager.GetString("Arg.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the minimum required operating system (OS) version required by the application. For example, the value &apos;5.1.2600.0&apos; indicates the operating system is Windows XP..
        /// </summary>
        internal static string Arg_OsVersion {
            get {
                return ResourceManager.GetString("Arg.OsVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies which manifests to create. Must be one of &apos;application&apos;, &apos;deployment&apos;, &apos;both&apos;..
        /// </summary>
        internal static string Arg_PackageMode {
            get {
                return ResourceManager.GetString("Arg.PackageMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the target platform of the application. This parameter can have the following values: &apos;AnyCPU&apos;, &apos;x86&apos;, &apos;x64&apos;, &apos;Itanium&apos;..
        /// </summary>
        internal static string Arg_Platform {
            get {
                return ResourceManager.GetString("Arg.Platform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the publisher of the application. This name is used for the folder name on the Start menu and is part of the name that appears in the Add or Remove Programs dialog box..
        /// </summary>
        internal static string Arg_Publisher {
            get {
                return ResourceManager.GetString("Arg.Publisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays only minimal information when the ClickOnce package is built..
        /// </summary>
        internal static string Arg_Quiet {
            get {
                return ResourceManager.GetString("Arg.Quiet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the base directory for all source globbing patterns..
        /// </summary>
        internal static string Arg_Source {
            get {
                return ResourceManager.GetString("Arg.Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the suite to which the application belongs. If specified, this determines the folder on the Start menu where the application is located after deployment..
        /// </summary>
        internal static string Arg_Suite {
            get {
                return ResourceManager.GetString("Arg.Suite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of the web page that is displayed in the Add or Remove Programs dialog box for the application..
        /// </summary>
        internal static string Arg_SupportUrl {
            get {
                return ResourceManager.GetString("Arg.SupportUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory to which ClickOnce packages will be published. If a relative path is specified, it will be relative to the source directory. This directory will be automatically excluded from all source globbing patterns..
        /// </summary>
        internal static string Arg_Target {
            get {
                return ResourceManager.GetString("Arg.Target", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the target framework of the application. Only .Net Framework targets net20 through to net48 are valid..
        /// </summary>
        internal static string Arg_TargetFramework {
            get {
                return ResourceManager.GetString("Arg.TargetFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify trust information. Must be one of: &apos;full&apos;, &apos;intranet&apos;, &apos;internet&apos;, or a path to an XML file containing custom trust info..
        /// </summary>
        internal static string Arg_TrustInfo {
            get {
                return ResourceManager.GetString("Arg.TrustInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether URL query-string parameters should be made available to the application. Has no effect if LaunchMode is &apos;start&apos;..
        /// </summary>
        internal static string Arg_TrustUrlParameters {
            get {
                return ResourceManager.GetString("Arg.TrustUrlParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies how application updates should be deployed. Must be one of &apos;off&apos;, &apos;starting&apos;, &apos;started&apos;, or a number of hours, weeks or days (e.g. &apos;1w&apos;). Only one unit can be specifed, and the interval cannot describe more than 1 year, regardless of unit..
        /// </summary>
        internal static string Arg_UpdateMode {
            get {
                return ResourceManager.GetString("Arg.UpdateMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies which manifest should be used for trust decisions. If true, the Product, Publisher, and SupportUrl properties are written to the application manifest; otherwise, they are written to the deployment manifest..
        /// </summary>
        internal static string Arg_UseApplicationTrust {
            get {
                return ResourceManager.GetString("Arg.UseApplicationTrust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether the .deploy file name extension mapping is used. If this parameter is true, every program file is published with a .deploy file name extension. This option is useful for web server security to limit the number of file name extensions that must be unblocked to enable ClickOnce application deployment..
        /// </summary>
        internal static string Arg_UseDeployExtension {
            get {
                return ResourceManager.GetString("Arg.UseDeployExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays extra information when the ClickOnce package is built..
        /// </summary>
        internal static string Arg_Verbose {
            get {
                return ResourceManager.GetString("Arg.Verbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the version of the deployment. This need not be the same as the version of the application..
        /// </summary>
        internal static string Arg_Version {
            get {
                return ResourceManager.GetString("Arg.Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClickOnce packager
        ///Copyright 2020 Andrew Mansell
        ///See license text for details (MIT).
        /// </summary>
        internal static string Banner {
            get {
                return ResourceManager.GetString("Banner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the following project values:.
        /// </summary>
        internal static string Build_Args {
            get {
                return ResourceManager.GetString("Build.Args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied as command line parameters:.
        /// </summary>
        internal static string Build_Args_CommandLine {
            get {
                return ResourceManager.GetString("Build.Args.CommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default:.
        /// </summary>
        internal static string Build_Args_Default {
            get {
                return ResourceManager.GetString("Build.Args.Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inferred:.
        /// </summary>
        internal static string Build_Args_Inferred {
            get {
                return ResourceManager.GetString("Build.Args.Inferred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied as settings (use clickonce configure to set):.
        /// </summary>
        internal static string Build_Args_Settings {
            get {
                return ResourceManager.GetString("Build.Args.Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: {0}.
        /// </summary>
        internal static string Build_Exceptions_Fatal {
            get {
                return ResourceManager.GetString("Build.Exceptions.Fatal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to infer entry point, multiple .exe files found.
        /// </summary>
        internal static string Build_Exceptions_MultipleEntryPoints {
            get {
                return ResourceManager.GetString("Build.Exceptions.MultipleEntryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to infer entry point, no .exe files found.
        /// </summary>
        internal static string Build_Exceptions_NoEntryPoint {
            get {
                return ResourceManager.GetString("Build.Exceptions.NoEntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating ClickOnce package from source directory &apos;{0}&apos;.
        /// </summary>
        internal static string Build_Verb_Create {
            get {
                return ResourceManager.GetString("Build.Verb.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verbose logging enabled.
        /// </summary>
        internal static string Build_Verbose {
            get {
                return ResourceManager.GetString("Build.Verbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the culture of the entry point assembly is used..
        /// </summary>
        internal static string Create_Culture {
            get {
                return ResourceManager.GetString("Create.Culture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the source directory is recursively searched for managed executables. If exactly one is found, it will be assigned to be the entry point..
        /// </summary>
        internal static string Create_EntryPoint {
            get {
                return ResourceManager.GetString("Create.EntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a default icon is used..
        /// </summary>
        internal static string Create_IconFile {
            get {
                return ResourceManager.GetString("Create.IconFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a name is inferred from the entry point assembly..
        /// </summary>
        internal static string Create_Name {
            get {
                return ResourceManager.GetString("Create.Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the value is inferred from the target framework..
        /// </summary>
        internal static string Create_OsVersion {
            get {
                return ResourceManager.GetString("Create.OsVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the target platform will be inferred from the entry assembly. Note, setting this value can cause ClickOnce validation errors if the specified value does not match the entry assembly, therefore it is recommended to leave this option unset..
        /// </summary>
        internal static string Create_Platform {
            get {
                return ResourceManager.GetString("Create.Platform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a publisher is inferred from the entry point assembly..
        /// </summary>
        internal static string Create_Publisher {
            get {
                return ResourceManager.GetString("Create.Publisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to the current directory..
        /// </summary>
        internal static string Create_Source {
            get {
                return ResourceManager.GetString("Create.Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &apos;none&apos; is specified, a bootstrap executable will be created to launch the application..
        /// </summary>
        internal static string Create_TargetFramework {
            get {
                return ResourceManager.GetString("Create.TargetFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the version number of the entry point assembly is used..
        /// </summary>
        internal static string Create_Version {
            get {
                return ResourceManager.GetString("Create.Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help text not found for key &apos;{0}&apos;..
        /// </summary>
        internal static string Error_HelpTextNotFound {
            get {
                return ResourceManager.GetString("Error.HelpTextNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locating assemblies....
        /// </summary>
        internal static string Glob_Assemblies {
            get {
                return ResourceManager.GetString("Glob.Assemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locating data files....
        /// </summary>
        internal static string Glob_DataFiles {
            get {
                return ResourceManager.GetString("Glob.DataFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locating entry point....
        /// </summary>
        internal static string Glob_EntryPoint {
            get {
                return ResourceManager.GetString("Glob.EntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locating files....
        /// </summary>
        internal static string Glob_Files {
            get {
                return ResourceManager.GetString("Glob.Files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None found.
        /// </summary>
        internal static string Glob_NoResults {
            get {
                return ResourceManager.GetString("Glob.NoResults", resourceCulture);
            }
        }
    }
}
